# -*- coding: utf-8 -*-
"""RainFall_Pred(RandomForest_Classifier).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17GBlda1co1cNhsdBCCWbWr_m6bPr2aub

Import The Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.utils import resample
from sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
import pickle

#Load THe Dataset
dataset=pd.read_csv("/content/Rainfall.csv")

print(type(dataset))

dataset.shape

dataset.head()

dataset.tail()

dataset['day'].unique()

dataset.info()

dataset.columns

#Remove extra spaces in all columns\
dataset.columns=dataset.columns.str.strip()

dataset.columns

dataset=dataset.drop(columns=["day"])

dataset.head()

#Checking The number of missing values
dataset.isnull().sum()

dataset['winddirection'].unique()

#Handle missing values
dataset['winddirection']=dataset['winddirection'].fillna(dataset['winddirection'].mode()[0])
dataset['windspeed']=dataset['windspeed'].fillna(dataset['windspeed'].median())

dataset.isnull().sum()

dataset['rainfall'].unique()

#Convering Yes & No to 0's and 1's
dataset['rainfall']=dataset['rainfall'].map({"yes":1,"no":0})

dataset.head()

"""Exploratory Data Analysis (EDA)"""

dataset.shape

#Setting plot style for all pots
sns.set(style="whitegrid")

dataset.describe()

dataset.columns

plt.figure(figsize=(15,10))

for i,column in enumerate(['pressure', 'maxtemp', 'temparature', 'mintemp','humidity','cloud','sunshine','windspeed'],1):
  plt.subplot(3,3,i)
  sns.histplot(dataset[column],kde=True)
  plt.title(f"Distributed of {column}")
plt.tight_layout()
plt.show()

plt.figure(figsize=(5,4))
sns.countplot(x="rainfall",data=dataset)
plt.title("Distribution of rainfall")
plt.show()

plt.figure(figsize=(10,8))
sns.heatmap(dataset.corr(),annot=True,cmap="coolwarm",fmt=".2f")
plt.title("Correlation heatmap")
plt.show()

plt.figure(figsize=(15,10))

for i,column in enumerate(['pressure', 'maxtemp', 'temparature', 'mintemp','humidity','cloud','sunshine','windspeed'],1):
  plt.subplot(3,3,i)
  sns.boxplot(dataset[column])
  plt.title(f"Boxplot of {column}")
plt.tight_layout()
plt.show()

"""Data Preprocessing"""

#drop highly correlated column
dataset=dataset.drop(columns=['maxtemp','temparature','mintemp'])

dataset.head()

print(dataset['rainfall'].value_counts())

#seperate majority and minority class
df_majority=dataset[dataset["rainfall"]==1]
df_minority=dataset[dataset["rainfall"]==0]

print(df_majority.shape)
print(df_minority.shape)

#downsample majority class to match minority count
df_majority_downsampled=resample(df_majority,replace=False,n_samples=len(df_minority),random_state=42)

df_majority_downsampled.shape

df_down_sampled=pd.concat([df_majority_downsampled,df_minority])

df_down_sampled.shape

df_down_sampled.head()

#Shuffle the fianl dataframe
df_downsampled=df_down_sampled.sample(frac=1,random_state=42).reset_index(drop=True)

df_downsampled.value_counts()

df_downsampled["rainfall"].value_counts()

#Split X and Y
x=df_downsampled.drop(columns=["rainfall"])
y=df_downsampled["rainfall"]

print(y)

#Splitting the dataset into training and test set
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

rf_model=RandomForestClassifier(random_state=42)

param_grid_rf={
    "n_estimators":[50,100,200],
    "max_features":["sqrt","log2"],
    "max_depth":[None,10,20,30],
    "min_samples_split":[2,5,10],
    "min_samples_leaf":[1,2,4]
}

#Hypertuning using GridsearchCV
grid_search_rf=GridSearchCV(estimator=rf_model,param_grid=param_grid_rf,cv=5,n_jobs=-1,verbose=2)
grid_search_rf.fit(x_train,y_train)

best_rf_model=grid_search_rf.best_estimator_
print("best parameter for random forest ",grid_search_rf.best_params_)

"""Model Evaluation"""

cv_scores=cross_val_score(best_rf_model,x_train,y_train,cv=5)
print("Cross Validation Scores :",cv_scores)
print("Mean-Cross Validation scores :",np.mean(cv_scores))

#Test Set Perfomance
y_pred=best_rf_model.predict(x_test)
print("Test Set Accuracy : ",accuracy_score(y_test,y_pred))
print("Test Set Confusion Matrix :\n",confusion_matrix(y_test,y_pred))
print("Classification Report :\n",classification_report(y_test,y_pred))

"""Prediction on UnKnown **Data**"""

x_train.columns

input_data=[1015.9,19.9,95,81,0.0,40.0,13.7]
input_df=pd.DataFrame([input_data],columns=['pressure', 'dewpoint', 'humidity', 'cloud', 'sunshine',
       'winddirection', 'windspeed'])

input_df

prediction=best_rf_model.predict(input_df)

print(prediction)

prediction[0]

prediction=best_rf_model.predict(input_df)
print("Prediction Result :","RainFall" if prediction[0]==1 else "No Rainfall")

